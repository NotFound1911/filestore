// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/proto/gen/file_manager/v1/file_manager_grpc.pb.go

// Package filemanagermocks is a generated GoMock package.
package filemanagermocks

import (
	context "context"
	reflect "reflect"

	file_managerv1 "github.com/NotFound1911/filestore/api/proto/gen/file_manager/v1"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFileManagerServiceClient is a mock of FileManagerServiceClient interface.
type MockFileManagerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerServiceClientMockRecorder
}

// MockFileManagerServiceClientMockRecorder is the mock recorder for MockFileManagerServiceClient.
type MockFileManagerServiceClientMockRecorder struct {
	mock *MockFileManagerServiceClient
}

// NewMockFileManagerServiceClient creates a new mock instance.
func NewMockFileManagerServiceClient(ctrl *gomock.Controller) *MockFileManagerServiceClient {
	mock := &MockFileManagerServiceClient{ctrl: ctrl}
	mock.recorder = &MockFileManagerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManagerServiceClient) EXPECT() *MockFileManagerServiceClientMockRecorder {
	return m.recorder
}

// GetFileMetaByUserId mocks base method.
func (m *MockFileManagerServiceClient) GetFileMetaByUserId(ctx context.Context, in *file_managerv1.GetFileMetaByUserIdReq, opts ...grpc.CallOption) (*file_managerv1.GetFileMetaByUserIdResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFileMetaByUserId", varargs...)
	ret0, _ := ret[0].(*file_managerv1.GetFileMetaByUserIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMetaByUserId indicates an expected call of GetFileMetaByUserId.
func (mr *MockFileManagerServiceClientMockRecorder) GetFileMetaByUserId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetaByUserId", reflect.TypeOf((*MockFileManagerServiceClient)(nil).GetFileMetaByUserId), varargs...)
}

// InsertIfNotExistFileMeta mocks base method.
func (m *MockFileManagerServiceClient) InsertIfNotExistFileMeta(ctx context.Context, in *file_managerv1.InsertIfNotExistFileMetaReq, opts ...grpc.CallOption) (*file_managerv1.InsertIfNotExistFileMetaResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertIfNotExistFileMeta", varargs...)
	ret0, _ := ret[0].(*file_managerv1.InsertIfNotExistFileMetaResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIfNotExistFileMeta indicates an expected call of InsertIfNotExistFileMeta.
func (mr *MockFileManagerServiceClientMockRecorder) InsertIfNotExistFileMeta(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIfNotExistFileMeta", reflect.TypeOf((*MockFileManagerServiceClient)(nil).InsertIfNotExistFileMeta), varargs...)
}

// InsertUserFile mocks base method.
func (m *MockFileManagerServiceClient) InsertUserFile(ctx context.Context, in *file_managerv1.InsertUserFileReq, opts ...grpc.CallOption) (*file_managerv1.InsertUserFileResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertUserFile", varargs...)
	ret0, _ := ret[0].(*file_managerv1.InsertUserFileResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserFile indicates an expected call of InsertUserFile.
func (mr *MockFileManagerServiceClientMockRecorder) InsertUserFile(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserFile", reflect.TypeOf((*MockFileManagerServiceClient)(nil).InsertUserFile), varargs...)
}

// MockFileManagerServiceServer is a mock of FileManagerServiceServer interface.
type MockFileManagerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerServiceServerMockRecorder
}

// MockFileManagerServiceServerMockRecorder is the mock recorder for MockFileManagerServiceServer.
type MockFileManagerServiceServerMockRecorder struct {
	mock *MockFileManagerServiceServer
}

// NewMockFileManagerServiceServer creates a new mock instance.
func NewMockFileManagerServiceServer(ctrl *gomock.Controller) *MockFileManagerServiceServer {
	mock := &MockFileManagerServiceServer{ctrl: ctrl}
	mock.recorder = &MockFileManagerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManagerServiceServer) EXPECT() *MockFileManagerServiceServerMockRecorder {
	return m.recorder
}

// GetFileMetaByUserId mocks base method.
func (m *MockFileManagerServiceServer) GetFileMetaByUserId(arg0 context.Context, arg1 *file_managerv1.GetFileMetaByUserIdReq) (*file_managerv1.GetFileMetaByUserIdResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetaByUserId", arg0, arg1)
	ret0, _ := ret[0].(*file_managerv1.GetFileMetaByUserIdResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMetaByUserId indicates an expected call of GetFileMetaByUserId.
func (mr *MockFileManagerServiceServerMockRecorder) GetFileMetaByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetaByUserId", reflect.TypeOf((*MockFileManagerServiceServer)(nil).GetFileMetaByUserId), arg0, arg1)
}

// InsertIfNotExistFileMeta mocks base method.
func (m *MockFileManagerServiceServer) InsertIfNotExistFileMeta(arg0 context.Context, arg1 *file_managerv1.InsertIfNotExistFileMetaReq) (*file_managerv1.InsertIfNotExistFileMetaResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIfNotExistFileMeta", arg0, arg1)
	ret0, _ := ret[0].(*file_managerv1.InsertIfNotExistFileMetaResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIfNotExistFileMeta indicates an expected call of InsertIfNotExistFileMeta.
func (mr *MockFileManagerServiceServerMockRecorder) InsertIfNotExistFileMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIfNotExistFileMeta", reflect.TypeOf((*MockFileManagerServiceServer)(nil).InsertIfNotExistFileMeta), arg0, arg1)
}

// InsertUserFile mocks base method.
func (m *MockFileManagerServiceServer) InsertUserFile(arg0 context.Context, arg1 *file_managerv1.InsertUserFileReq) (*file_managerv1.InsertUserFileResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserFile", arg0, arg1)
	ret0, _ := ret[0].(*file_managerv1.InsertUserFileResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserFile indicates an expected call of InsertUserFile.
func (mr *MockFileManagerServiceServerMockRecorder) InsertUserFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserFile", reflect.TypeOf((*MockFileManagerServiceServer)(nil).InsertUserFile), arg0, arg1)
}

// mustEmbedUnimplementedFileManagerServiceServer mocks base method.
func (m *MockFileManagerServiceServer) mustEmbedUnimplementedFileManagerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileManagerServiceServer")
}

// mustEmbedUnimplementedFileManagerServiceServer indicates an expected call of mustEmbedUnimplementedFileManagerServiceServer.
func (mr *MockFileManagerServiceServerMockRecorder) mustEmbedUnimplementedFileManagerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileManagerServiceServer", reflect.TypeOf((*MockFileManagerServiceServer)(nil).mustEmbedUnimplementedFileManagerServiceServer))
}

// MockUnsafeFileManagerServiceServer is a mock of UnsafeFileManagerServiceServer interface.
type MockUnsafeFileManagerServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFileManagerServiceServerMockRecorder
}

// MockUnsafeFileManagerServiceServerMockRecorder is the mock recorder for MockUnsafeFileManagerServiceServer.
type MockUnsafeFileManagerServiceServerMockRecorder struct {
	mock *MockUnsafeFileManagerServiceServer
}

// NewMockUnsafeFileManagerServiceServer creates a new mock instance.
func NewMockUnsafeFileManagerServiceServer(ctrl *gomock.Controller) *MockUnsafeFileManagerServiceServer {
	mock := &MockUnsafeFileManagerServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFileManagerServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFileManagerServiceServer) EXPECT() *MockUnsafeFileManagerServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFileManagerServiceServer mocks base method.
func (m *MockUnsafeFileManagerServiceServer) mustEmbedUnimplementedFileManagerServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileManagerServiceServer")
}

// mustEmbedUnimplementedFileManagerServiceServer indicates an expected call of mustEmbedUnimplementedFileManagerServiceServer.
func (mr *MockUnsafeFileManagerServiceServerMockRecorder) mustEmbedUnimplementedFileManagerServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileManagerServiceServer", reflect.TypeOf((*MockUnsafeFileManagerServiceServer)(nil).mustEmbedUnimplementedFileManagerServiceServer))
}
