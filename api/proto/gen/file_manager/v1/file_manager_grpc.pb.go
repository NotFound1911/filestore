// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: api/proto/file_manager/v1/file_manager.proto

package file_managerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileManagerService_InsertIfNotExistFileMeta_FullMethodName = "/file_manager.FileManagerService/InsertIfNotExistFileMeta"
	FileManagerService_InsertUserFile_FullMethodName           = "/file_manager.FileManagerService/InsertUserFile"
	FileManagerService_GetFileMetaByUserId_FullMethodName      = "/file_manager.FileManagerService/GetFileMetaByUserId"
)

// FileManagerServiceClient is the client API for FileManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagerServiceClient interface {
	InsertIfNotExistFileMeta(ctx context.Context, in *InsertIfNotExistFileMetaReq, opts ...grpc.CallOption) (*InsertIfNotExistFileMetaResp, error)
	InsertUserFile(ctx context.Context, in *InsertUserFileReq, opts ...grpc.CallOption) (*InsertUserFileResp, error)
	GetFileMetaByUserId(ctx context.Context, in *GetFileMetaByUserIdReq, opts ...grpc.CallOption) (*GetFileMetaByUserIdResp, error)
}

type fileManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagerServiceClient(cc grpc.ClientConnInterface) FileManagerServiceClient {
	return &fileManagerServiceClient{cc}
}

func (c *fileManagerServiceClient) InsertIfNotExistFileMeta(ctx context.Context, in *InsertIfNotExistFileMetaReq, opts ...grpc.CallOption) (*InsertIfNotExistFileMetaResp, error) {
	out := new(InsertIfNotExistFileMetaResp)
	err := c.cc.Invoke(ctx, FileManagerService_InsertIfNotExistFileMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) InsertUserFile(ctx context.Context, in *InsertUserFileReq, opts ...grpc.CallOption) (*InsertUserFileResp, error) {
	out := new(InsertUserFileResp)
	err := c.cc.Invoke(ctx, FileManagerService_InsertUserFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerServiceClient) GetFileMetaByUserId(ctx context.Context, in *GetFileMetaByUserIdReq, opts ...grpc.CallOption) (*GetFileMetaByUserIdResp, error) {
	out := new(GetFileMetaByUserIdResp)
	err := c.cc.Invoke(ctx, FileManagerService_GetFileMetaByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagerServiceServer is the server API for FileManagerService service.
// All implementations must embed UnimplementedFileManagerServiceServer
// for forward compatibility
type FileManagerServiceServer interface {
	InsertIfNotExistFileMeta(context.Context, *InsertIfNotExistFileMetaReq) (*InsertIfNotExistFileMetaResp, error)
	InsertUserFile(context.Context, *InsertUserFileReq) (*InsertUserFileResp, error)
	GetFileMetaByUserId(context.Context, *GetFileMetaByUserIdReq) (*GetFileMetaByUserIdResp, error)
	mustEmbedUnimplementedFileManagerServiceServer()
}

// UnimplementedFileManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileManagerServiceServer struct {
}

func (UnimplementedFileManagerServiceServer) InsertIfNotExistFileMeta(context.Context, *InsertIfNotExistFileMetaReq) (*InsertIfNotExistFileMetaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertIfNotExistFileMeta not implemented")
}
func (UnimplementedFileManagerServiceServer) InsertUserFile(context.Context, *InsertUserFileReq) (*InsertUserFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUserFile not implemented")
}
func (UnimplementedFileManagerServiceServer) GetFileMetaByUserId(context.Context, *GetFileMetaByUserIdReq) (*GetFileMetaByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileMetaByUserId not implemented")
}
func (UnimplementedFileManagerServiceServer) mustEmbedUnimplementedFileManagerServiceServer() {}

// UnsafeFileManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagerServiceServer will
// result in compilation errors.
type UnsafeFileManagerServiceServer interface {
	mustEmbedUnimplementedFileManagerServiceServer()
}

func RegisterFileManagerServiceServer(s grpc.ServiceRegistrar, srv FileManagerServiceServer) {
	s.RegisterService(&FileManagerService_ServiceDesc, srv)
}

func _FileManagerService_InsertIfNotExistFileMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertIfNotExistFileMetaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).InsertIfNotExistFileMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagerService_InsertIfNotExistFileMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).InsertIfNotExistFileMeta(ctx, req.(*InsertIfNotExistFileMetaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_InsertUserFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertUserFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).InsertUserFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagerService_InsertUserFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).InsertUserFile(ctx, req.(*InsertUserFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagerService_GetFileMetaByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileMetaByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServiceServer).GetFileMetaByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagerService_GetFileMetaByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServiceServer).GetFileMetaByUserId(ctx, req.(*GetFileMetaByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManagerService_ServiceDesc is the grpc.ServiceDesc for FileManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_manager.FileManagerService",
	HandlerType: (*FileManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertIfNotExistFileMeta",
			Handler:    _FileManagerService_InsertIfNotExistFileMeta_Handler,
		},
		{
			MethodName: "InsertUserFile",
			Handler:    _FileManagerService_InsertUserFile_Handler,
		},
		{
			MethodName: "GetFileMetaByUserId",
			Handler:    _FileManagerService_GetFileMetaByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/file_manager/v1/file_manager.proto",
}
